{"version":3,"file":"/Users/endlessdev/Workspace/rankr-org/database/crawler.ts","sources":["/Users/endlessdev/Workspace/rankr-org/database/crawler.ts"],"names":[],"mappings":"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","sourcesContent":["import CommonParser from \"../utils/CommonParser\"\nimport NateParser from \"../utils/NateParser\"\nimport paramDaum from \"../models/params/DaumParam\"\nimport paramNaver from \"../models/params/NaverParam\"\nimport {sequelize, Sequelize} from \"../database/index\";\nimport * as RankLogNaver from \"../database/models/RankLogNaver\"\nimport * as RankLogZum from \"../database/models/RankLogZum\"\nimport * as RankLogNate from \"../database/models/RankLogNate\"\nimport * as RankLogDaum from \"../database/models/RankLogDaum\"\nimport * as RankCrawlLog from \"../database/models/RankCrawlLog\"\nimport {paramZum} from \"../models/params/ZumParam\";\n\nconst CronJob = require('cron').CronJob,\n    commonParser: CommonParser = new CommonParser();\n\nexport const crawlJob = new CronJob({\n    cronTime: '* * * * *',\n    timeZone: process.env.CRON_TIMEZONE,\n    onTick: async () => {\n        await sequelize.sync().then(function () {\n            return RankCrawlLog.model.create({}).then(async (crawlLog) => {\n                crawlLog = crawlLog.get({plain: true});\n                commonParser.setParam(paramNaver);\n                const naverResult = await commonParser.getRank();\n                for (let rank of naverResult.data) {\n                    RankLogNaver.model.create({\n                        rank_crawl_idx: crawlLog.idx,\n                        rank: rank.rank,\n                        title: rank.title,\n                    }).catch(Sequelize.ValidationError, (err) => {\n                        console.log(err);\n                    });\n                }\n                commonParser.setParam(paramDaum);\n                const daumResult = await commonParser.getRank();\n                for (let rank of daumResult.data) {\n                    RankLogDaum.model.create({\n                        rank_crawl_idx: crawlLog.idx,\n                        rank: rank.rank,\n                        title: rank.title,\n                        status: rank.status,\n                        value: rank.value\n                    }).catch(Sequelize.ValidationError, err => {\n                        console.log(err);\n                    });\n                }\n                commonParser.setParam(paramZum);\n                const zumResult = await commonParser.getRank();\n                for (let rank of zumResult.data) {\n                    RankLogZum.model.create({\n                        rank_crawl_idx: crawlLog.idx,\n                        rank: rank.rank,\n                        title: rank.title,\n                    }).catch(Sequelize.ValidationError, (err) => {\n                        console.log(err);\n                    });\n                }\n                const nateResult = await NateParser.getNateRank();\n                for (let rank of nateResult.data) {\n                    RankLogNate.model.create({\n                        rank_crawl_idx: crawlLog.idx,\n                        rank: rank.rank,\n                        title: rank.title,\n                        status: rank.status,\n                        value: rank.value\n                    }).catch(Sequelize.ValidationError, err => {\n                        console.log(err);\n                    });\n                }\n            })\n        })\n    }\n});"]}