{"version":3,"file":"/Users/endlessdev/Workspace/rankr-org/routes/rank.ts","sources":["/Users/endlessdev/Workspace/rankr-org/routes/rank.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,iBAmCA;;AAnCA,mCAAoC;AAEpC,sDAAiD;AACjD,kDAA6C;AAC7C,0DAAqD;AACrD,wDAAmD;AACnD,sDAAmD;AAGnD,IAAI,MAAM,GAAG,IAAI,sBAAY,EAAE,CAAC;AAEhC,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,EAAC,MAAM,EAAE,OAAO,EAAC,CAAC,CAAC;AAI7C,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAO,GAAG,EAAE,IAAI;;;;;gBACjC,MAAM,CAAC,QAAQ,CAAC,oBAAU,CAAC,CAAC;gBAC5B,KAAA,GAAG,CAAA;gBAAQ,WAAM,MAAM,CAAC,OAAO,EAAE,EAAA;;gBAAjC,GAAI,IAAI,GAAG,SAAsB,CAAC;;;;KACrC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,UAAO,GAAG,EAAE,IAAI;;;;;gBAChC,MAAM,CAAC,QAAQ,CAAC,mBAAS,CAAC,CAAC;gBAC3B,KAAA,GAAG,CAAA;gBAAQ,WAAM,MAAM,CAAC,OAAO,EAAE,EAAA;;gBAAjC,GAAI,IAAI,GAAG,SAAsB,CAAC;;;;KACrC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,UAAO,GAAG,EAAE,IAAI;;;;;gBAChC,KAAA,GAAG,CAAA;gBAAQ,WAAM,oBAAU,CAAC,WAAW,EAAE,EAAA;;gBAAzC,GAAI,IAAI,GAAG,SAA8B,CAAA;;;;KAC5C,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,UAAO,GAAG,EAAE,IAAI;;;;;gBAC/B,MAAM,CAAC,QAAQ,CAAC,mBAAQ,CAAC,CAAC;gBAC1B,KAAA,GAAG,CAAA;gBAAQ,WAAM,MAAM,CAAC,OAAO,EAAE,EAAA;;gBAAjC,GAAI,IAAI,GAAG,SAAsB,CAAC;;;;KACrC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","sourcesContent":["/// <reference path=\"../typings/tsd.d.ts\"/>\n\nimport * as Router from 'koa-router'\n\nimport CommonParser from \"../utils/CommonParser\";\nimport NateParser from \"../utils/NateParser\";\nimport paramNaver from \"../models/params/NaverParam\";\nimport paramDaum from \"../models/params/DaumParam\";\nimport {paramZum} from \"../models/params/ZumParam\";\n\nimport async = Q.async;\nlet parser = new CommonParser();\n\nconst router = new Router({prefix: '/rank'});\n\n/* GET home page. */\n\nrouter.get('/naver', async (ctx, next) => {\n    parser.setParam(paramNaver);\n    ctx.body = await parser.getRank();\n});\n\nrouter.get('/daum', async (ctx, next) => {\n    parser.setParam(paramDaum);\n    ctx.body = await parser.getRank();\n});\n\nrouter.get('/nate', async (ctx, next) => {\n    ctx.body = await NateParser.getNateRank()\n});\n\nrouter.get('/zum', async (ctx, next) => {\n    parser.setParam(paramZum);\n    ctx.body = await parser.getRank();\n});\n\nexport default router;\n"]}